- hosts: load_balancer
  remote_user: ubuntu
  become: true
  tasks:
    - name: Ping check host
      ping: ~
    - name: Install Haproxy.
      apt:
        name: haproxy
    - name: Copy load balancer configuration
      copy:
        src: "./haproxy.cfg.d/haproxy.cfg"
        dest: "/etc/haproxy/haproxy.cfg"
        owner: root
        group: root
        mode: 0644
    - name: Check if there are no errors in configuration file
      command: "/usr/sbin/haproxy -c -f /etc/haproxy/haproxy.cfg"
      register: hapee_check
    - name: Reload load balancer if the check passed
      service:
        name: haproxy
        state: reloaded
      when: hapee_check is success and not ansible_check_mode


- hosts: kubernetes_nodes
  remote_user: ubuntu
  become: true
  tasks:
    - name: Forwarded ipv4 kubernetes nodes
      command: "sudo sysctl -w net.ipv4.ip_forward=1"


- hosts: kubespray_server
  remote_user: ubuntu
  become: true
  tasks:
    - name: Ping check host
      ping: ~
    - name: Copy ssh key from administrator
      copy:
        src: "/home/duy/.ssh/id_rsa"
        dest: "/root/.ssh/id_rsa"
        owner: root
        group: root
    - name: Copy kubespray configuration
      copy:
        src: "../kubespray.tar"
        dest: "/root/kubespray.tar"
        owner: root
        group: root
        mode: 0644
    - name: Check if there are no errors in configuration file
      command: "test -e /root/kubespray.tar"
      register: kubespray_tar_check
    - name: Unzip kubespray configuration file
      shell: |
        tar -xvf kubespray.tar
      args:
        chdir: "/root"
      register: kubespray_check
    - name: Install kubespray dependencies apt and build python 3.10
      environment:
        VERSION: 3.10.13
      shell: |
        sudo apt update
        sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev
        wget https://www.python.org/ftp/python/$VERSION/Python-$VERSION.tgz
        tar -xf Python-$VERSION.tgz
        cd  Python-$VERSION/
        ./configure --enable-optimizations
        make -j $(nproc)
        sudo make altinstall
      when: kubespray_check is success and kubespray_tar_check is success and not ansible_check_mode
      register: apt_py_check
    - name: Install kubespray dependencies pip and run playbook
      environment:
        VENVDIR: kubespray-venv
        KUBESPRAYDIR: /root/kubespray
      shell: |
        alias python3=python3.10
        alias pip3=pip3.10
        rm -rf /root/$VENVDIR
        python3 -m venv $VENVDIR
        . $VENVDIR/bin/activate
        cd $KUBESPRAYDIR
        pip3 install --upgrade pip
        pip3 install setuptools-rust
        pip3 install -U -r requirements.txt
        ansible-playbook -i inventory/mycluster/hosts.yaml --private-key /root/.ssh/id_rsa cluster.yml
      when: apt_py_check is success and not ansible_check_mode
